{"version":3,"sources":["init-fcm.js","App.js","serviceWorker.js","register-sw.js","index.js"],"names":["messaging","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","usePublicVapidKey","renderNotification","notification","i","key","compose","withState","withHandlers","pushNotification","setNotifications","notifications","newNotification","concat","lifecycle","componentDidMount","props","setToken","requestPermission","then","a","getToken","token","catch","err","console","log","map","Boolean","window","location","hostname","match","navigator","serviceWorker","register","registration","scope","ReactDOM","render","StrictMode","document","getElementById","ready","unregister","error","message"],"mappings":"6RAcMA,G,MAXyBC,gBAAuB,CAClDC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGsBT,aAEzCA,EAAUU,kBACR,2F,WCVIC,EAAqB,SAACC,EAAcC,GAAf,OAAqB,wBAAIC,IAAKD,GAAID,IAyB9CG,cACbC,YAAU,QAAS,WAAY,IAC/BA,YAAU,gBAAiB,mBAAoB,IAC/CC,YAAa,CACXC,iBAAkB,gBAChBC,EADgB,EAChBA,iBACAC,EAFgB,EAEhBA,cAFgB,OAGZ,SAAAC,GAAe,OACjBF,EAAiBC,EAAcE,OAAOD,QAE5CE,YAAU,CACFC,kBADE,WACmB,IAAD,4HACe,EAAKC,MADpB,EAChBP,iBAAkBQ,EADF,EACEA,SAE1B1B,EACG2B,oBACAC,KAFH,sBAEQ,4BAAAC,EAAA,sEACgB7B,EAAU8B,WAD1B,OACEC,EADF,OAEJL,EAASK,GAFL,4CAILC,OAAM,SAAUC,GACfC,QAAQC,IAAI,sCAAuCF,MAV/B,gDAXflB,EAbH,SAAC,GAAD,IAAGgB,EAAH,EAAGA,MAAOX,EAAV,EAAUA,cAAV,OACV,oCACE,qFACA,kDACoB,2BAAIW,IAExB,kDAEGX,EAAcgB,IAAIzB,QCfL0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBE,kBAAmBC,WACrBA,UAAUC,cACPC,SAAS,8BACThB,MAAK,SAASiB,GACbX,QAAQC,IAAI,qCAAsCU,EAAaC,UAEhEd,OAAM,SAASC,GACdC,QAAQC,IAAI,6CAA8CF,MCCpEc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFsHpB,kBAAmBT,WACrBA,UAAUC,cAAcS,MACrBxB,MAAK,SAAAiB,GACJA,EAAaQ,gBAEdrB,OAAM,SAAAsB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.09d7ca25.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/messaging\";\r\n\r\nconst initializedFirebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAvmhcu-Dv-uWJBgsbq1I6MTgMG9iS0s5U\",\r\n    authDomain: \"fcmtest-4e427.firebaseapp.com\",\r\n    databaseURL: \"https://fcmtest-4e427.firebaseio.com\",\r\n    projectId: \"fcmtest-4e427\",\r\n    storageBucket: \"fcmtest-4e427.appspot.com\",\r\n    messagingSenderId: \"690677624901\",\r\n    appId: \"1:690677624901:web:d30a3ba1ba72394a79732c\",\r\n    measurementId: \"G-LZNPDYBYR4\"\r\n});\r\n\r\nconst messaging = initializedFirebaseApp.messaging();\r\n\r\nmessaging.usePublicVapidKey(\r\n  \"BM5cnFH5mHIXNfApe66-V-8yeFWKnGL6NUvsn3NDB6E4fmanZ2A83cVq5WPo0iZ_zw7OD_7ffq_hRe1f3QKFlH0\"\r\n);\r\n\r\nexport { messaging };","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport { messaging } from \"./init-fcm\";\nimport { compose, lifecycle, withHandlers, withState } from \"recompose\";\n\n\nconst renderNotification = (notification, i) => <li key={i}>{notification}</li>;\n\n// const registerPushListener = pushNotification =>\n//   navigator.serviceWorker.addEventListener(\"message\", ({ data }) =>\n//     pushNotification(\n//       data.data\n//         ? data.data.message\n//         : data[\"firebase-messaging-msg-data\"].data.message\n//     )\n//   );\n\n\nconst App = ({ token, notifications }) => (\n  <>\n    <h1>React + Firebase Cloud Messaging (Push Notifications)</h1>\n    <div>\n      Current token is: <p>{token}</p>\n    </div>\n    <ul>\n      Notifications List:\n      {notifications.map(renderNotification)}\n    </ul>\n  </>\n);\n\nexport default compose(\n  withState(\"token\", \"setToken\", \"\"),\n  withState(\"notifications\", \"setNotifications\", []),\n  withHandlers({\n    pushNotification: ({\n      setNotifications,\n      notifications\n    }) => newNotification =>\n        setNotifications(notifications.concat(newNotification))\n  }),\n  lifecycle({\n    async componentDidMount() {\n      const { pushNotification, setToken } = this.props;\n\n      messaging\n        .requestPermission()\n        .then(async function () {\n          const token = await messaging.getToken();\n          setToken(token);\n        })\n        .catch(function (err) {\n          console.log(\"Unable to get permission to notify.\", err);\n        });\n\n      // registerPushListener(pushNotification);\n    }\n  })\n)(App);\n\n\n\n\n// const App = () => {\n//   const [msg, setMsg] = useState('')\n//   const [token, setToken] = useState('')\n\n//   useEffect(() => {\n//     messaging.requestPermission()\n//       .then(async function () {\n//         const token = await messaging.getToken();\n//         console.log(token)\n//       })\n//       .catch(function (err) {\n//         console.log(\"Unable to get permission to notify.\", err);\n//       });\n//     navigator.serviceWorker.addEventListener(\"message\", (message) => console.log(message));\n//   })\n\n//   const handleClick = () => {\n//     axios.get(\"/api/enduser/order/heroku\")\n//       .then(resp => {\n//         console.log(resp)\n//         setMsg(resp.data.data)\n//       })\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n\n//         <button onClick={handleClick}>\n//           Click here for test\n//         </button>\n\n//         <p style={{ color: \"#fff\" }}>{msg}</p>\n//       </header>\n\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const registerServiceWorker = () => {\r\n    if (\"serviceWorker\" in navigator) {\r\n      navigator.serviceWorker\r\n        .register(\"./firebase-messaging-sw.js\")\r\n        .then(function(registration) {\r\n          console.log(\"Registration successful, scope is:\", registration.scope);\r\n        })\r\n        .catch(function(err) {\r\n          console.log(\"Service worker registration failed, error:\", err);\r\n        });\r\n    }\r\n  };\r\n  \r\n  export { registerServiceWorker };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { registerServiceWorker } from \"./register-sw\";\n\nregisterServiceWorker()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}